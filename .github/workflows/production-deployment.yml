name: Production Deployment Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  QTEC_STAGING_URL: 'https://staging.qtecsolution.com'
  QTEC_PROD_URL: 'https://qtecsolution.com'

jobs:
  # Pre-deployment Testing
  pre-deployment-tests:
    name: Pre-deployment Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [smoke, functional, ui-ux, responsive, performance, accessibility]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npm run install:browsers

      - name: Run ${{ matrix.test-suite }} tests
        run: npm run test:${{ matrix.test-suite }}
        env:
          QTEC_URL: ${{ env.QTEC_STAGING_URL }}
          BROWSER: chromium
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            test-results/
            allure-results/
            cucumber-report.html
            cucumber-report.json
          retention-days: 30

  # Security and Performance Testing
  security-performance-tests:
    name: Security & Performance Tests
    runs-on: ubuntu-latest
    needs: [pre-deployment-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npm run install:browsers

      - name: Run security tests
        run: |
          # Add security testing commands here
          echo "Running security tests..."
          npm run test:security || true
        continue-on-error: true

      - name: Run performance tests
        run: npm run test:performance
        env:
          QTEC_URL: ${{ env.QTEC_STAGING_URL }}
        continue-on-error: true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            test-results/
            performance-report.json
          retention-days: 30

  # Generate Comprehensive Reports
  generate-reports:
    name: Generate Comprehensive Reports
    runs-on: ubuntu-latest
    needs: [pre-deployment-tests, security-performance-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Merge and generate reports
        run: |
          mkdir -p merged-results
          find test-artifacts -name "allure-results" -type d -exec cp -r {}/. merged-results/ \;
          find test-artifacts -name "test-results" -type d -exec cp -r {}/. merged-results/ \;
          
          # Generate Allure report
          npm run report:generate
          
          # Generate Cucumber report
          npm run test:format
          
          # Create deployment summary
          echo "# Deployment Test Summary" > deployment-summary.md
          echo "Generated on: $(date)" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "## Test Results" >> deployment-summary.md
          echo "- Allure Report: [View Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> deployment-summary.md
          echo "- Cucumber Report: [View Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/cucumber-report.html)" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "## Deployment Status" >> deployment-summary.md
          echo "- Environment: ${{ github.event.inputs.environment || 'production' }}" >> deployment-summary.md
          echo "- Version: ${{ github.ref_name }}" >> deployment-summary.md
          echo "- Commit: ${{ github.sha }}" >> deployment-summary.md

      - name: Upload reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-reports
          path: |
            allure-report/
            cucumber-report.html
            cucumber-report.json
            deployment-summary.md
          retention-days: 90

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [generate-reports]
    if: github.event.inputs.environment == 'staging' || github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: aws s3 sync ./dist s3://staging.qtecsolution.com
          echo "Staging deployment completed successfully!"

      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment tests on staging..."
          npm ci
          npm run install:browsers
          npm run test:smoke
        env:
          QTEC_URL: ${{ env.QTEC_STAGING_URL }}

      - name: Notify staging deployment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš€ Staging Deployment - ${context.ref_name}`,
              body: `## Staging Deployment Complete\n\n- **Version:** ${context.ref_name}\n- **Commit:** ${context.sha}\n- **Environment:** Staging\n- **Status:** âœ… Success\n\n[View Test Reports](https://${context.repo.owner}.github.io/${context.repo.repo}/)`
            });

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, generate-reports]
    if: github.event.inputs.environment == 'production' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: aws s3 sync ./dist s3://qtecsolution.com
          echo "Production deployment completed successfully!"

      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment tests on production..."
          npm ci
          npm run install:browsers
          npm run test:smoke
        env:
          QTEC_URL: ${{ env.QTEC_PROD_URL }}

      - name: Create release
        uses: actions/create-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## ðŸš€ Production Deployment Complete
            
            ### Test Results
            - Allure Report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
            - Cucumber Report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/cucumber-report.html
            
            ### Deployment Details
            - **Version:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            - **Environment:** Production
            - **Status:** âœ… Success
            
            ### What's New
            - Comprehensive test coverage
            - Automated CI/CD pipeline
            - Detailed test reporting
          draft: false
          prerelease: false

      - name: Notify production deployment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸŽ‰ Production Deployment - ${context.ref_name}`,
              body: `## Production Deployment Complete\n\n- **Version:** ${context.ref_name}\n- **Commit:** ${context.sha}\n- **Environment:** Production\n- **Status:** âœ… Success\n\n[View Test Reports](https://${context.repo.owner}.github.io/${context.repo.repo}/)`
            });
